version: '3.8'

services:
  bitfinex-lending-bot:
    build: .
    container_name: bitfinex-lending-bot
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
      - ./.env:/app/.env:ro
    restart: unless-stopped
    environment:
      - TZ=Asia/Taipei
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: >
      bash -c "
        # Create log directory
        mkdir -p /app/logs

        # Load environment from mounted .env file
        if [ -f /app/.env ]; then
          source /app/.env
        fi

        # Auto lending loop script
        if [ \"\${AUTO_LENDING_ENABLED:-true}\" = 'true' ]; then
          echo 'Auto lending is enabled. Starting automated execution loop...'
          echo \"Execution interval: \${AUTO_LENDING_INTERVAL:-600} seconds\"
          echo 'Logs will be available at /app/logs/auto_lending.log'

          # Initial execution
          echo 'Running initial auto lending execution...'
          /app/run_auto_lending.sh || echo 'Initial execution failed'

          # Main loop for periodic execution
          while true; do
            echo \"Sleeping for \${AUTO_LENDING_INTERVAL:-600} seconds until next execution...\"
            sleep \${AUTO_LENDING_INTERVAL:-600}

            echo 'Running scheduled auto lending execution...'
            /app/run_auto_lending.sh || echo 'Scheduled execution failed'
          done
        else
          echo 'Auto lending is disabled. Running in manual mode...'
          echo 'Use docker-compose exec bitfinex-lending-bot bash to access the container'
          echo 'Or run: docker-compose exec bitfinex-lending-bot /app/run_auto_lending.sh'
          sleep infinity
        fi
      "

  # Optional: Redis for caching (if needed in future)
  # redis:
  #   image: redis:7-alpine
  #   container_name: bitfinex-redis
  #   restart: unless-stopped
  #   volumes:
  #     - redis_data:/data
  #   command: redis-server --appendonly yes

# volumes:
#   redis_data: